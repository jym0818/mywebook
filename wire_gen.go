// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/jym/mywebook/internal/events/article"
	"github.com/jym/mywebook/internal/repository"
	"github.com/jym/mywebook/internal/repository/cache"
	"github.com/jym/mywebook/internal/repository/dao"
	"github.com/jym/mywebook/internal/service"
	"github.com/jym/mywebook/internal/web"
	"github.com/jym/mywebook/internal/web/jwt"
	"github.com/jym/mywebook/ioc"
)

// Injectors from wire.go:

func InitWeb() *App {
	cmdable := ioc.InitRedis()
	handler := jwt.NewRedisJwt(cmdable)
	v := ioc.InitMiddlewares(cmdable, handler)
	db := ioc.InitDB()
	userDAO := dao.NewuserDAO(db)
	userCache := cache.NewRedisUserCache(cmdable)
	userRepository := repository.NewuserRepository(userDAO, userCache)
	userService := service.NewuserService(userRepository)
	codeCache := cache.NewRedisCodeCache(cmdable)
	codeRepository := repository.NewcodeRepository(codeCache)
	smsService := ioc.InitSMS(cmdable)
	codeService := service.NewcodeService(codeRepository, smsService)
	logger := ioc.InitLogger()
	userHandler := web.NewUserHandler(userService, codeService, cmdable, handler, logger)
	wechatService := ioc.InitWechat()
	oAuth2WechatHandler := web.NewOAuth2WechatHandler(wechatService, userService, handler)
	articleDAO := dao.NewarticleDAO(db)
	articleCache := cache.NewRedisArticle(cmdable)
	articleRepository := repository.NewarticleRepository(articleDAO, articleCache, userRepository)
	client := ioc.InitKafka()
	syncProducer := ioc.NewSyncProducer(client)
	producer := article.NewKafkaProducer(syncProducer)
	articleService := service.NewarticleService(articleRepository, producer)
	clientv3Client := ioc.InitEtcd()
	interactiveServiceClient := ioc.InitIntrGRPCClient(clientv3Client)
	articleHandler := web.NewArticleHandler(articleService, interactiveServiceClient)
	engine := ioc.InitGin(v, userHandler, oAuth2WechatHandler, articleHandler)
	rankingService := service.NewBatchRankingService(articleService, interactiveServiceClient)
	job := ioc.InitRankingJob(rankingService)
	cron := ioc.InitJobs(logger, job)
	app := &App{
		web:  engine,
		cron: cron,
	}
	return app
}

// wire.go:

var RankingService = wire.NewSet(repository.NewrankingRepository, cache.NewRedisRankingCache, service.NewBatchRankingService)

var UserService = wire.NewSet(dao.NewuserDAO, cache.NewRedisUserCache, repository.NewuserRepository, service.NewuserService, web.NewUserHandler)

var CodeService = wire.NewSet(cache.NewRedisCodeCache, repository.NewcodeRepository, service.NewcodeService)

var ArticleService = wire.NewSet(dao.NewarticleDAO, repository.NewarticleRepository, service.NewarticleService, cache.NewRedisArticle)
